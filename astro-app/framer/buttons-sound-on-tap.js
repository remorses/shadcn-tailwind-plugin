// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer, do not edit manually */
'use client';
import './chunk-MLKGABMK.js';

// https :https://framerusercontent.com/modules/eU3zxBKFoHQhYFiXuCB7/e05UICsEGRW8sSt9hrO3/roUNcvo3k.js
import { jsx as _jsx6, jsxs as _jsxs4, } from 'react/jsx-runtime';
import {
  addFonts,
  addPropertyControls as addPropertyControls4,
  ComponentViewportProvider,
  ControlType as ControlType8,
  cx,
  getFonts,
  getPropertyControls,
  useActiveVariantCallback,
  useComponentViewport,
  useLocaleInfo,
  useOnVariantChange,
  useVariantState,
  withCSS as withCSS2,
} from 'unframer';
import { LayoutGroup, motion as motion4, MotionConfigContext, } from 'unframer';
import * as React5 from 'react';

// https :https://framerusercontent.com/modules/NRKVbMFYrBaqL0rx532t/VbcskmUsZXtmDmPN8jHk/Audio.js
import { Fragment as _Fragment, jsx as _jsx3, jsxs as _jsxs3, } from 'react/jsx-runtime';
import {
  useCallback as useCallback3,
  useEffect as useEffect7,
  useMemo as useMemo4,
  useRef as useRef4,
  useState as useState4,
} from 'react';
import { addPropertyControls as addPropertyControls2, ControlType as ControlType5, RenderTarget as RenderTarget4, } from 'unframer';
import { animate as animate3, MotionValue as MotionValue2, } from 'unframer';

// https :https://framerusercontent.com/modules/VTUDdizacRHpwbkOamr7/AykinQJbgwl92LvMGZwu/constants.js
import { ControlType, } from 'unframer';
var containerStyles = {
  position: 'relative',
  width: '100%',
  height: '100%',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
};
var emptyStateStyle = {
  ...containerStyles,
  borderRadius: 6,
  background: 'rgba(136, 85, 255, 0.3)',
  color: '#85F',
  border: '1px dashed #85F',
  flexDirection: 'column',
};
var defaultEvents = {
  onClick: {
    type: ControlType.EventHandler,
  },
  onMouseEnter: {
    type: ControlType.EventHandler,
  },
  onMouseLeave: {
    type: ControlType.EventHandler,
  },
};
var fontSizeOptions = {
  type: ControlType.Number,
  title: 'Font Size',
  min: 2,
  max: 200,
  step: 1,
  displayStepper: true,
};
var fontControls = {
  font: {
    type: ControlType.Boolean,
    title: 'Font',
    defaultValue: false,
    disabledTitle: 'Default',
    enabledTitle: 'Custom',
  },
  fontFamily: {
    type: ControlType.String,
    title: 'Family',
    placeholder: 'Inter',
    hidden: ({ font, },) => !font,
  },
  fontWeight: {
    type: ControlType.Enum,
    title: 'Weight',
    options: [
      100,
      200,
      300,
      400,
      500,
      600,
      700,
      800,
      900,
    ],
    optionTitles: [
      'Thin',
      'Extra-light',
      'Light',
      'Regular',
      'Medium',
      'Semi-bold',
      'Bold',
      'Extra-bold',
      'Black',
    ],
    hidden: ({ font, },) => !font,
  },
};

// https :https://framerusercontent.com/modules/D4TWeLfcxT6Tysr2BlYg/iZjmqdxVx1EOiM3k1FaW/useOnNavigationTargetChange.js
import { useIsInCurrentNavigationTarget, } from 'unframer';
import { useEffect, } from 'react';
function useOnEnter(onEnter, enabled,) {
  return useOnSpecificTargetChange(true, onEnter, enabled,);
}
function useOnExit(onExit, enabled,) {
  return useOnSpecificTargetChange(false, onExit, enabled,);
}
function useOnSpecificTargetChange(goal, callback, enabled = true,) {
  const isInTarget = useIsInCurrentNavigationTarget();
  useEffect(() => {
    if (enabled && isInTarget === goal) callback();
  }, [
    isInTarget,
  ],);
}

// https :https://framerusercontent.com/modules/ExNgrA7EJTKUPpH6vIlN/eiOrSJ2Ab5M9jPCvVwUz/useConstant.js
import { useRef, } from 'react';
function useConstant(init,) {
  const ref = useRef(null,);
  if (ref.current === null) {
    ref.current = init();
  }
  return ref.current;
}

// https :https://framerusercontent.com/modules/D2Lz5CmnNVPZFFiZXalt/QaCzPbriZBfXWZIIycFI/colorFromToken.js
import { Color, } from 'unframer';

// https :https://framerusercontent.com/modules/3mKFSGQqKHV82uOV1eBc/5fbRLvOpxZC0JOXugvwm/isMotionValue.js
import { MotionValue, } from 'unframer';
var isMotionValue = (v,) => v instanceof MotionValue;

// https :https://framerusercontent.com/modules/xDiQsqBGXzmMsv7AlEVy/uhunpMiNsbXxzjlXsg1y/useUniqueClassName.js
import * as React from 'react';

// https :https://framerusercontent.com/modules/ETACN5BJyFTSo0VVDJfu/NHRqowOiXkF9UwOzczF7/variantUtils.js
import { ControlType as ControlType2, } from 'unframer';

// https :https://framerusercontent.com/modules/eMBrwoqQK7h6mEeGQUH8/GuplvPJVjmxpk9zqOTcb/isBrowser.js
import { useMemo, } from 'react';

// https :https://framerusercontent.com/modules/v9AWX2URmiYsHf7GbctE/XxKAZ9KlhWqf5x1JMyyF/useOnChange.js
import { useEffect as useEffect3, } from 'react';
function useOnChange(value, callback,) {
  useEffect3(
    () => (
      // @ts-ignore this should be detected as a MV :shrug:
      isMotionValue(value,) ? value.onChange(callback,) : void 0
    ),
  );
}

// https :https://framerusercontent.com/modules/4zHZnO5JojN1PrIbu2jm/revv9QCWpkh8lPzi2jje/time.js
function secondsToMinutes(seconds,) {
  const minutes = Math.floor(seconds / 60,);
  const s = Math.floor(seconds % 60,);
  return minutes + ':' + (s < 10 ? '0' : '') + s;
}

// https :https://framerusercontent.com/modules/kNDwabfjDEb3vUxkQlZS/fSIr3AOAYbGlfSPgXpYu/useAutoMotionValue.js
import { useCallback, useEffect as useEffect4, useRef as useRef2, } from 'react';
import { animate, motionValue, RenderTarget, } from 'unframer';
function useAutoMotionValue(inputValue, options,) {
  var ref;
  const optionsRef = useRef2(options,);
  const animation = useRef2();
  const didInitialMount = useRef2(false,);
  const isOnCanvas = RenderTarget.current() === RenderTarget.canvas;
  const onChangeDeps = (options === null || options === void 0 ? void 0 : options.onChangeDeps) ? options.onChangeDeps : [];
  const onChange = useCallback(options === null || options === void 0 ? void 0 : options.onChange, [
    ...onChangeDeps,
  ],);
  const transformer = useCallback(
    (value2,) =>
      ((ref = optionsRef.current) === null || ref === void 0 ? void 0 : ref.transform) ? optionsRef.current.transform(value2,) : value2,
    [],
  );
  const value = useConstant(
    () => isMotionValue(inputValue,) ? inputValue : motionValue(transformer(inputValue,),),
  );
  useEffect4(() => {
    if (!isMotionValue(inputValue,) && didInitialMount.current) {
      var ref1, ref2;
      const newValue = transformer(inputValue,);
      (ref1 = animation.current) === null || ref1 === void 0 ? void 0 : ref1.stop();
      if (onChange) onChange(newValue, value,);
      if (((ref2 = optionsRef.current) === null || ref2 === void 0 ? void 0 : ref2.animate) && !isOnCanvas) {
        var ref3;
        animation.current = animate(value, newValue, (ref3 = optionsRef.current) === null || ref3 === void 0 ? void 0 : ref3.transition,);
      } else {
        value.set(newValue,);
      }
    }
    didInitialMount.current = true;
  }, [
    inputValue,
    ...onChangeDeps,
  ],);
  return value;
}

// https :https://framerusercontent.com/modules/cuQH4dmpDnV8YK1mSgQX/KqRXqunFjE6ufhpc7ZRu/useFontControls.js
import { fontStore, } from 'unframer';
import { useEffect as useEffect5, } from 'react';

// https :https://framerusercontent.com/modules/afBE9Yx1W6bY5q32qPxe/m3q7puE2tbo1S2C0s0CT/useRenderTarget.js
import { useMemo as useMemo2, } from 'react';
import { RenderTarget as RenderTarget2, } from 'unframer';

// https :https://framerusercontent.com/modules/zGkoP8tPDCkoBzMdt5uq/0zFSjxIYliHxrQQnryFX/useControlledState.js
import * as React2 from 'react';

// https :https://framerusercontent.com/modules/5SM58HxZHxjjv7aLMOgQ/WXz9i6mVki0bBCrKdqB3/propUtils.js
import { useMemo as useMemo3, } from 'react';
import { ControlType as ControlType3, } from 'unframer';
function useRadius(props,) {
  const { borderRadius, isMixedBorderRadius, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius, } = props;
  const radiusValue = useMemo3(
    () => isMixedBorderRadius ? `${topLeftRadius}px ${topRightRadius}px ${bottomRightRadius}px ${bottomLeftRadius}px` : `${borderRadius}px`,
    [
      borderRadius,
      isMixedBorderRadius,
      topLeftRadius,
      topRightRadius,
      bottomRightRadius,
      bottomLeftRadius,
    ],
  );
  return radiusValue;
}
var borderRadiusControl = {
  borderRadius: {
    title: 'Radius',
    type: ControlType3.FusedNumber,
    toggleKey: 'isMixedBorderRadius',
    toggleTitles: [
      'Radius',
      'Radius per corner',
    ],
    valueKeys: [
      'topLeftRadius',
      'topRightRadius',
      'bottomRightRadius',
      'bottomLeftRadius',
    ],
    valueLabels: [
      'TL',
      'TR',
      'BR',
      'BL',
    ],
    min: 0,
  },
};
function usePadding(props,) {
  const { padding, paddingPerSide, paddingTop, paddingRight, paddingBottom, paddingLeft, } = props;
  const paddingValue = useMemo3(
    () => paddingPerSide ? `${paddingTop}px ${paddingRight}px ${paddingBottom}px ${paddingLeft}px` : padding,
    [
      padding,
      paddingPerSide,
      paddingTop,
      paddingRight,
      paddingBottom,
      paddingLeft,
    ],
  );
  return paddingValue;
}
var paddingControl = {
  padding: {
    type: ControlType3.FusedNumber,
    toggleKey: 'paddingPerSide',
    toggleTitles: [
      'Padding',
      'Padding per side',
    ],
    valueKeys: [
      'paddingTop',
      'paddingRight',
      'paddingBottom',
      'paddingLeft',
    ],
    valueLabels: [
      'T',
      'R',
      'B',
      'L',
    ],
    min: 0,
    title: 'Padding',
  },
};

// https :https://framer.com/m/framer/audio-assets.js@0.2.0
import { jsx as _jsx, jsxs as _jsxs, } from 'react/jsx-runtime';
import { motion, } from 'unframer';
function PlayIcon(props,) {
  return /* @__PURE__ */ _jsx(motion.svg, {
    ...props,
    xmlns: 'http://www.w3.org/2000/svg',
    viewBox: '0 0 16 16',
    children: /* @__PURE__ */ _jsx('path', {
      d: 'M 5.379 1.292 C 4.968 1.033 4.449 1.017 4.023 1.251 C 3.598 1.486 3.334 1.933 3.333 2.419 L 3.333 13.581 C 3.334 14.067 3.598 14.514 4.023 14.749 C 4.449 14.983 4.968 14.967 5.379 14.708 L 14.215 9.127 C 14.602 8.883 14.836 8.457 14.836 8 C 14.836 7.543 14.602 7.117 14.215 6.873 Z',
      fill: '#333',
    },),
  },);
}
function PauseIcon(props,) {
  return /* @__PURE__ */ _jsxs(motion.svg, {
    ...props,
    xmlns: 'http://www.w3.org/2000/svg',
    viewBox: '0 0 16 16',
    children: [
      /* @__PURE__ */ _jsx('path', {
        d: 'M 3 3 C 3 2.448 3.448 2 4 2 L 6 2 C 6.552 2 7 2.448 7 3 L 7 13 C 7 13.552 6.552 14 6 14 L 4 14 C 3.448 14 3 13.552 3 13 Z',
        fill: '#343434',
      },),
      /* @__PURE__ */ _jsx('path', {
        d: 'M 9 3 C 9 2.448 9.448 2 10 2 L 12 2 C 12.552 2 13 2.448 13 3 L 13 13 C 13 13.552 12.552 14 12 14 L 10 14 C 9.448 14 9 13.552 9 13 Z',
        fill: '#343434',
      },),
    ],
  },);
}

// https :https://framerusercontent.com/modules/AHY1z1xp5QsxaZBkEL9H/QbJLrozNycG0sbASqJdf/Slider.js
import { jsx as _jsx2, jsxs as _jsxs2, } from 'react/jsx-runtime';
import { addPropertyControls, ControlType as ControlType4, RenderTarget as RenderTarget3, withCSS, } from 'unframer';
import { animate as animate2, motion as motion2, transform, useTransform, } from 'unframer';
import { useCallback as useCallback2, useRef as useRef3, useState as useState3, } from 'react';

// https :https://framer.com/m/framer/lodash.js@0.3.0
var FUNC_ERROR_TEXT = 'Expected a function';
var nativeMax = Math.max;
var nativeMin = Math.min;
var NAN = 0 / 0;
var reTrim = /^\s+|\s+$/g;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
var now = function () {
  return Date.now();
};
function isObject(value,) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}
function toNumber(value,) {
  if (typeof value == 'number') {
    return value;
  }
  if (typeof value == 'symbol') {
    return NAN;
  }
  if (isObject(value,)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other,) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '',);
  var isBinary = reIsBinary.test(value,);
  return isBinary || reIsOctal.test(value,) ? freeParseInt(value.slice(2,), isBinary ? 2 : 8,) : reIsBadHex.test(value,) ? NAN : +value;
}
function debounce(func, wait, options,) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT,);
  }
  wait = toNumber(wait,) || 0;
  if (isObject(options,)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait,) || 0, wait,) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time,) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args,);
    return result;
  }
  function leadingEdge(time,) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait,);
    return leading ? invokeFunc(time,) : result;
  }
  function remainingWait(time,) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke,) : timeWaiting;
  }
  function shouldInvoke(time,) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now();
    if (shouldInvoke(time,)) {
      return trailingEdge(time,);
    }
    timerId = setTimeout(timerExpired, remainingWait(time,),);
  }
  function trailingEdge(time,) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time,);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId,);
    }
    lastInvokeTime = 0;
    lastArgs =
      lastCallTime =
      lastThis =
      timerId =
        void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now(),);
  }
  function debounced() {
    var time = now(), isInvoking = shouldInvoke(time,);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime,);
      }
      if (maxing) {
        clearTimeout(timerId,);
        timerId = setTimeout(timerExpired, wait,);
        return invokeFunc(lastCallTime,);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait,);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
function throttle(func, wait, options,) {
  var leading = true, trailing = true;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT,);
  }
  if (isObject(options,)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    leading,
    maxWait: wait,
    trailing,
  },);
}

// https :https://framerusercontent.com/modules/AHY1z1xp5QsxaZBkEL9H/QbJLrozNycG0sbASqJdf/Slider.js
var KnobOptions;
(function (KnobOptions2,) {
  KnobOptions2['Hide'] = 'Hide';
  KnobOptions2['Hover'] = 'Hover';
  KnobOptions2['Show'] = 'Show';
})(KnobOptions || (KnobOptions = {}),);
var Slider = withCSS(function Slider2(props,) {
  const {
    value: valueProp,
    trackHeight,
    fillColor,
    focusColor,
    min,
    max,
    onChange,
    onChangeLive,
    onMax,
    onMin,
    trackColor,
    trackRadius,
    knobSize,
    knobColor,
    constrainKnob,
    shadow,
    shouldAnimateChange,
    transition,
    overdrag,
    knobSetting,
    style,
  } = props;
  const [hovered, setHovered,] = useState3(false,);
  const [focused, setFocused,] = useState3(false,);
  const onCanvas = RenderTarget3.current() === RenderTarget3.canvas;
  const shouldAnimate = shouldAnimateChange && !onCanvas;
  const isConstrained = constrainKnob && knobSetting === KnobOptions.Show;
  const showKnob = knobSetting !== KnobOptions.Hide;
  const input = useRef3();
  const knobPadding = 8;
  const updateValue = useCallback2((newVal, target,) => {
    throttledInputUpdate(newVal,);
    if (onChange) onChange(newVal,);
    if (shouldAnimate) animate2(target, newVal, transition,);
    else requestAnimationFrame(() => target.set(newVal,));
  }, [transition, shouldAnimate, onChange,],);
  const value = useAutoMotionValue(valueProp, {
    onChange: updateValue,
    transform: (value2,) => transform(value2, [0, 100,], [min, max,],),
  },);
  const knobX = useTransform(value, [min, max,], ['0%', '100%',],);
  const normalizedValue = useTransform(value, [min, max,], [0, 1,],);
  const throttledInputUpdate = useCallback2(
    throttle((val,) => {
      var ref;
      if ((ref = input.current) === null || ref === void 0 ? void 0 : ref.value) input.current.value = val;
    }, 100,),
    [input,],
  );
  useOnChange(value, (val,) => {
    if (isMotionValue(valueProp,)) throttledInputUpdate(val,);
    if (onMax && val >= max) onMax();
    if (onMin && val <= min) onMin();
    if (onChangeLive) onChangeLive(val,);
  },);
  const handleInputChange = (e,) => {
    updateValue(parseFloat(e.target.value,), value,);
  };
  const handleMouseDown = (e,) => {
    if (parseFloat(e.target.value,) !== 0) updateValue(parseFloat(e.target.value,), value,);
  };
  const handleMouseUp = () => {
  };
  const totalKnobWidth = showKnob ? knobSize + knobPadding : knobPadding;
  const totalHeight = Math.max(knobSize + knobPadding, trackHeight,);
  return /* @__PURE__ */ _jsxs2('div', {
    className: 'framer-default-slider',
    onMouseEnter: () => setHovered(true,),
    onMouseLeave: () => setHovered(false,),
    style: {
      position: 'relative',
      ...style,
      alignItems: 'center',
      justifyContent: 'flex-start',
      border: `0px solid ${focusColor}`,
      '--framer-default-slider-height': totalHeight,
      '--framer-default-slider-width': totalKnobWidth,
    },
    children: [
      /* @__PURE__ */ _jsx2('input', {
        ref: input,
        style: {
          flexShrink: 0,
          minHeight: totalHeight,
          opacity: 0,
          margin: 0,
          display: 'flex',
          ...style,
          WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
          ...!isConstrained && { width: `calc(100% + ${totalKnobWidth}px)`, marginLeft: -totalKnobWidth / 2, },
        },
        onFocus: () => setFocused(true,),
        onBlur: () => setFocused(false,),
        type: 'range',
        min,
        max,
        defaultValue: -1,
        step: 'any',
        onChange: handleInputChange,
        onMouseDown: handleMouseDown,
        onMouseUp: handleMouseUp,
      },),
      /* @__PURE__ */ _jsx2('div', {
        style: {
          background: trackColor,
          position: 'absolute',
          top: `calc(50% - ${Math.ceil(trackHeight / 2,)}px)`,
          borderRadius: trackRadius,
          display: 'flex',
          height: trackHeight,
          width: '100%',
          transformOrigin: 'left',
          pointerEvents: 'none',
          overflow: 'hidden',
        },
        children: /* @__PURE__ */ _jsx2(motion2.div, {
          style: {
            height: trackHeight,
            width: '100%',
            background: fillColor,
            scaleX: normalizedValue,
            position: 'absolute',
            top: `calc(50% - ${Math.ceil(trackHeight / 2,)}px)`,
            transformOrigin: 'left',
            pointerEvents: 'none',
          },
        },),
      },),
      /* @__PURE__ */ _jsx2(motion2.div, {
        style: {
          x: knobX,
          position: 'absolute',
          display: 'flex',
          top: `calc(50% - ${Math.floor(knobSize / 2,)}px)`,
          pointerEvents: 'none',
          ...isConstrained ? { width: `calc(100% - ${knobSize}px`, left: 0, } : { width: `100%`, left: -knobSize / 2, },
        },
        children: /* @__PURE__ */ _jsx2(motion2.div, {
          initial: false,
          animate: { scale: hovered && knobSetting === KnobOptions.Hover || knobSetting === KnobOptions.Show ? 1 : 0, },
          transition: { type: 'spring', stiffness: 900, damping: 40, },
          style: {
            transformOrigin: '50% 50%',
            width: knobSize,
            height: knobSize,
            borderRadius: '50%',
            background: knobColor,
            pointerEvents: 'none',
            boxShadow: `0px 1px 2px 0px ${shadow}, 
                                0px 2px 4px 0px ${shadow}, 
                                0px 4px 8px 0px ${shadow}`,
          },
        },),
      },),
    ],
  },);
}, [
  '.framer-default-slider input[type=range] {  width: 100%; height: 100% background:transparent margin: 0;}',
  '.framer-default-slider input[type=range]:focus { outline: none; }',
  '.framer-default-slider input[type=range]::-ms-track { width: 100%; cursor: pointer; background: transparent; border-color: transparent; color: transparent; }',
  '.framer-default-slider input[type=range]::-webkit-slider-thumb { height: var(--framer-default-slider-height, 0px); width: var(--framer-default-slider-width, 0px); border-radius: 0;  background: none; }',
  '.framer-default-slider input[type=range]::-moz-range-thumb { height: var(--framer-default-slider-height, 0px); width: var(--framer-default-slider-width, 0px); border-radius: 0;  background: none; }',
  '.framer-default-slider input[type=range]::-ms-thumb  { height: var(--framer-default-slider-height, 0px); width: var(--framer-default-slider-width, 0px); border-radius: 0;  background: none; }',
],);
Slider.displayName = 'Slider';
Slider.defaultProps = {
  height: 20,
  width: 200,
  trackHeight: 4,
  fillColor: '#09F',
  trackColor: '#DDD',
  knobColor: '#FFF',
  focusColor: 'rgba(0, 153, 255,0)',
  shadow: 'rgba(0,0,0,0.1)',
  knobSize: 20,
  overdrag: true,
  min: 0,
  max: 100,
  value: 50,
  trackRadius: 5,
  knobSetting: KnobOptions.Show,
  constrainKnob: false,
  transition: { type: 'spring', delay: 0, stiffness: 750, damping: 50, },
  shouldAnimateChange: true,
};
addPropertyControls(Slider, {
  fillColor: { title: 'Tint', type: ControlType4.Color, },
  trackColor: { title: 'Track', type: ControlType4.Color, },
  knobColor: { title: 'Knob', type: ControlType4.Color, },
  shadow: { type: ControlType4.Color, title: 'Shadow', },
  // focusColor: {
  //     title: "Focus",
  //     type: ControlType.Color,
  // },
  shouldAnimateChange: { type: ControlType4.Boolean, title: 'Changes', enabledTitle: 'Animate', disabledTitle: 'Instant', },
  transition: { type: ControlType4.Transition, defaultValue: Slider.defaultProps.transition, },
  knobSetting: { type: ControlType4.Enum, displaySegmentedControl: true, title: 'Knob', options: ['Hide', 'Hover', 'Show',], },
  constrainKnob: {
    type: ControlType4.Boolean,
    title: 'Constrain',
    enabledTitle: 'Yes',
    disabledTitle: 'No',
    hidden: ({ knobSetting, },) => knobSetting !== KnobOptions.Show,
  },
  knobSize: {
    type: ControlType4.Number,
    title: 'Knob',
    min: 10,
    max: 100,
    hidden: ({ knobSetting, },) => knobSetting === KnobOptions.Hide,
  },
  value: { type: ControlType4.Number, title: 'Value', min: 0, max: 100, unit: '%', },
  trackHeight: { title: 'Height', type: ControlType4.Number, min: 0, },
  min: { title: 'Min', type: ControlType4.Number, displayStepper: true, },
  trackRadius: { type: ControlType4.Number, displayStepper: true, min: 0, max: 200, title: 'Radius', },
  max: { title: 'Max', type: ControlType4.Number, displayStepper: true, },
  onChange: { type: ControlType4.EventHandler, },
  onMax: { type: ControlType4.EventHandler, },
  onMin: { type: ControlType4.EventHandler, },
},);

// https :https://framerusercontent.com/modules/NRKVbMFYrBaqL0rx532t/VbcskmUsZXtmDmPN8jHk/Audio.js
var isMotionValue2 = (v,) => v instanceof MotionValue2;
var SrcType;
(function (SrcType2,) {
  SrcType2['Video'] = 'Upload';
  SrcType2['Url'] = 'URL';
})(SrcType || (SrcType = {}),);
function PlayTime(props,) {
  const { currentTime, startTime, } = props;
  const [playTime, setPlayTime,] = useState4('0:00',);
  useEffect7(() => {
    setPlayTime(secondsToMinutes(startTime,),);
  }, [startTime,],);
  useOnChange(currentTime, (latest,) => {
    setPlayTime(secondsToMinutes(latest,),);
  },);
  return /* @__PURE__ */ _jsx3(_Fragment, { children: playTime, },);
}
var checkIfPlaying = (player,) => player.current && !player.current.paused && !player.current.ended && player.current.readyState > 2;
function Audio(props,) {
  const {
    playing,
    background,
    progressColor,
    trackHeight,
    gap,
    trackColor,
    srcUrl,
    srcType,
    srcFile,
    loop,
    autoPlay,
    progress,
    volume,
    showTime,
    showTrack,
    playPauseCursor,
    showPlayPause,
    onTimeUpdate,
    onMetadata,
    onPlay,
    onPause,
    onEnd,
    pauseOnExit,
    onPlayGlobalPauseOption,
  } = props;
  const [isPlaying, setIsPlaying,] = useState4(false,);
  const [duration, setDuration,] = useState4(0,);
  const player = useRef4();
  const playerInfo = useRef4({ ready: false, animation: null, },);
  const trackProgress = useAutoMotionValue(progress, {
    transform: (value,) => value * 0.01,
    onChange: (newValue, value,) => {
      if (player.current.duration) {
        player.current.currentTime = newValue * player.current.duration;
        handlePlayStateUpdate('motionHook',);
      }
    },
  },);
  const padding = usePadding(props,);
  const borderRadius = useRadius(props,);
  const shouldPlay = RenderTarget4.current() === RenderTarget4.preview;
  const shouldPausePlayers = onPlayGlobalPauseOption === 'pause';
  const url = srcType === SrcType.Url ? srcUrl : srcFile;
  const shouldAutoPlay = shouldPlay && playing;
  const handlePlayStateUpdate = useCallback3((_,) => {
    var ref, ref1;
    const currentDuration = player.current.duration;
    const currentTime = player.current.currentTime;
    (ref = playerInfo.current) === null || ref === void 0
      ? void 0
      : (ref1 = ref.animation) === null || ref1 === void 0
      ? void 0
      : ref1.stop();
    if (Math.abs(currentTime - trackProgress.get(),) > 0.5) trackProgress.set(currentTime,);
    if (!shouldPlay) return;
    const isNowPlaying = checkIfPlaying(player,);
    if (isPlaying !== isNowPlaying) setIsPlaying(isNowPlaying,);
    if (isNowPlaying && shouldPlay) {
      playerInfo.current.animation = animate3(trackProgress, currentDuration, {
        type: 'tween',
        ease: 'linear',
        duration: currentDuration - currentTime,
      },);
    }
  }, [shouldPlay, isPlaying,],);
  const pauseAllAudioPlayers = () => {
    const audioPlayerElements = document.querySelectorAll('.framer-audio',);
    audioPlayerElements.forEach((el,) => {
      el.pause();
    },);
  };
  const playAudio = () => {
    if (shouldPlay) {
      player.current.play().catch((e,) => {
      },);
    }
  };
  const pauseAudio = () => {
    var ref, ref1;
    player.current.pause();
    (ref = playerInfo.current) === null || ref === void 0
      ? void 0
      : (ref1 = ref.animation) === null || ref1 === void 0
      ? void 0
      : ref1.stop();
  };
  const handleMetadata = () => {
    if (onMetadata) onMetadata({ duration: player.current.duration, },);
    setDuration(player.current.duration,);
  };
  const initProgress = () => {
    if (!isMotionValue2(progress,)) player.current.currentTime = progress * 0.01 * player.current.duration;
  };
  const handleReady = () => {
    if (!playerInfo.current.ready) {
      if (shouldAutoPlay) playAudio();
      playerInfo.current.ready = true;
      initProgress();
    }
  };
  const handleSeek = (val,) => {
    if (player.current.currentTime) {
      player.current.currentTime = val;
      handlePlayStateUpdate('handleSeek',);
    }
  };
  const handleEnd = () => {
    if (onEnd) onEnd();
  };
  const handlePlayClick = () => {
    if (shouldPausePlayers) pauseAllAudioPlayers();
    playAudio();
  };
  useEffect7(() => {
    if (shouldPlay) {
      if (playing === true) playAudio();
      else pauseAudio();
    } else {
      if (playing === true) setIsPlaying(true,);
      else setIsPlaying(false,);
    }
  }, [playing,],);
  useEffect7(() => {
    if (playerInfo.current.ready && isPlaying && onPlay) onPlay();
    else if (playerInfo.current.ready && onPause) onPause();
  }, [isPlaying,],);
  useEffect7(() => {
    player.current.volume = volume / 100;
  }, [volume,],);
  useEffect7(() => {
    playerInfo.current.ready = false;
  }, [srcFile, srcType, srcUrl,],);
  useEffect7(() => {
  }, [],);
  useOnEnter(() => {
    if (shouldAutoPlay) playAudio();
  },);
  useOnExit(() => {
    if (pauseOnExit) player.current.pause();
  },);
  useOnChange(trackProgress, (val,) => {
    var ref;
    const progressPercent = ((ref = player.current) === null || ref === void 0 ? void 0 : ref.duration)
      ? val / player.current.duration * 100
      : null;
    if (onTimeUpdate) onTimeUpdate(val, progressPercent, secondsToMinutes(val,),);
  },);
  const iconStyles = useMemo4(() => ({ marginRight: showTime || showTrack ? gap : 0, flexShrink: 0, cursor: playPauseCursor, }), [
    playPauseCursor,
    showTime,
    showTrack,
    gap,
  ],);
  return /* @__PURE__ */ _jsxs3('div', {
    style: { ...containerStyles, position: 'relative', overflow: 'hidden', background, padding, borderRadius, },
    children: [
      /* @__PURE__ */ _jsx3('audio', {
        src: url,
        loop,
        className: 'framer-audio',
        ref: player,
        preload: 'metadata',
        autoPlay: shouldAutoPlay,
        onLoadedMetadata: handleMetadata,
        onCanPlayThrough: handleReady,
        // Listen to all events for status changes
        onPlaying: () => handlePlayStateUpdate('playingEvent',),
        onPlay: () => handlePlayStateUpdate('playEvent',),
        onSeeked: () => handlePlayStateUpdate('seekEvent',),
        onPause: () => handlePlayStateUpdate('pauseEvent',),
        onEnded: () => handleEnd(),
      },),
      showPlayPause && /* @__PURE__ */ _jsx3(_Fragment, {
        children: isPlaying
          ? /* @__PURE__ */ _jsx3(PauseIcon, {
            width: 16,
            whileTap: { scale: 0.9, },
            onClick: () => pauseAudio(),
            style: iconStyles,
            'aria-label': 'pause audio',
          },)
          : /* @__PURE__ */ _jsx3(PlayIcon, {
            width: 16,
            whileTap: { scale: 0.9, },
            onClick: handlePlayClick,
            style: iconStyles,
            'aria-label': 'play audio',
          },),
      },),
      showTime && /* @__PURE__ */ _jsxs3('p', {
        style: {
          userSelect: 'none',
          color: '#333',
          fontSize: 12,
          fontWeight: 500,
          letterSpacing: -0.25,
          margin: 0,
          flexShrink: 0,
          fontVariantNumeric: 'tabular-nums',
          marginRight: showTrack ? gap : 0,
        },
        children: [
          /* @__PURE__ */ _jsx3(PlayTime, {
            startTime: duration * (isMotionValue2(progress,) ? progress.get() : progress * 0.01),
            currentTime: trackProgress,
          },),
          /* @__PURE__ */ _jsx3('span', { style: { padding: '0 2px', }, children: '/', },),
          duration > 0 ? secondsToMinutes(duration,) : '1:34',
        ],
      },),
      showTrack && /* @__PURE__ */
      _jsx3(Slider, {
        style: { width: '100%', },
        value: trackProgress,
        fillColor: progressColor,
        knobSetting: 'Hover',
        shadow: `rgba(0,0,0,0)`,
        knobSize: 10,
        knobColor: progressColor,
        onChange: handleSeek,
        shouldAnimateChange: false,
        min: 0,
        max: duration,
        trackColor,
      },),
    ],
  },);
}
Audio.defaultProps = {
  background: '#EBEBEB',
  trackColor: '#FFFFFF',
  progressColor: '#333333',
  srcUrl: 'https://assets.mixkit.co/music/preview/mixkit-tech-house-vibes-130.mp3',
  // "https://assets.mixkit.co/sfx/preview/mixkit-young-man-coughing-2227.mp3",
  srcType: SrcType.Url,
  pauseOnExit: true,
  borderRadius: 8,
  padding: 15,
  progress: 0,
  volume: 25,
  loop: false,
  playing: true,
  autoPlay: true,
  showTime: true,
  showTrack: true,
  showPlayPause: true,
  onPlayGlobalPauseOption: 'continue',
  trackHeight: 4,
  gap: 15,
  height: 50,
  width: 240,
};
addPropertyControls2(Audio, {
  srcType: { type: ControlType5.Enum, displaySegmentedControl: true, title: 'Source', options: [SrcType.Url, SrcType.Video,], },
  srcUrl: {
    type: ControlType5.String,
    title: ' ',
    placeholder: '.../example.mp4',
    hidden(props,) {
      return props.srcType === SrcType.Video;
    },
  },
  srcFile: {
    type: ControlType5.File,
    title: ' ',
    allowedFileTypes: ['mp4', 'mp3', 'wav', 'm4a',],
    hidden(props,) {
      return props.srcType === SrcType.Url;
    },
  },
  playing: { title: 'Playing', type: ControlType5.Boolean, enabledTitle: 'Yes', disabledTitle: 'No', },
  loop: { title: 'Loop', type: ControlType5.Boolean, enabledTitle: 'Yes', disabledTitle: 'No', },
  // autoPlay: {
  //     type: ControlType.Boolean,
  //     title: "Autoplay",
  //     enabledTitle: "Yes",
  //     disabledTitle: "No",
  // },
  progress: { title: 'Progress', type: ControlType5.Number, max: 100, min: 0, unit: '%', },
  volume: { type: ControlType5.Number, max: 100, min: 0, unit: '%', },
  progressColor: { title: 'Progress', type: ControlType5.Color, defaultValue: Audio.defaultProps.progressColor, },
  trackColor: { title: 'Track', type: ControlType5.Color, defaultValue: Audio.defaultProps.trackColor, },
  background: { title: 'Player', type: ControlType5.Color, defaultValue: Audio.defaultProps.background, },
  ...paddingControl,
  ...borderRadiusControl,
  gap: { type: ControlType5.Number, min: 0, max: 100, displayStepper: true, },
  showPlayPause: { type: ControlType5.Boolean, title: 'Play/Pause', enabledTitle: 'Show', disabledTitle: 'Hide', },
  playPauseCursor: {
    type: ControlType5.Enum,
    title: 'Cursor',
    options: ['default', 'pointer',],
    optionTitles: ['Default', 'Pointer',],
    defaultValue: 'default',
    hidden(props,) {
      return !props.showPlayPause;
    },
  },
  showTrack: { type: ControlType5.Boolean, title: 'Track', enabledTitle: 'Show', disabledTitle: 'Hide', },
  showTime: { type: ControlType5.Boolean, title: 'Time', enabledTitle: 'Show', disabledTitle: 'Hide', },
  pauseOnExit: { type: ControlType5.Boolean, title: 'On Leave', enabledTitle: 'Pause', disabledTitle: 'Continue', },
  onPlayGlobalPauseOption: {
    type: ControlType5.Enum,
    title: 'On Play',
    options: ['continue', 'pause',],
    optionTitles: ['Continue All', 'Pause All',],
  },
  onPlay: { type: ControlType5.EventHandler, },
  onPause: { type: ControlType5.EventHandler, },
  onEnd: { type: ControlType5.EventHandler, },
  onTimeUpdate: { type: ControlType5.EventHandler, },
},);

// https :https://framerusercontent.com/modules/tYScH7LTqUtz5KUaUAYP/p8dptk4UIND8hbFWz9V7/Phosphor.js
import { jsx as _jsx5, } from 'react/jsx-runtime';
import * as React4 from 'react';
import { useEffect as useEffect8, useRef as useRef5, useState as useState5, } from 'react';
import { addPropertyControls as addPropertyControls3, ControlType as ControlType7, RenderTarget as RenderTarget5, } from 'unframer';
import { motion as motion3, } from 'unframer';

// https :https://framer.com/m/framer/icon-nullstate.js@0.7.0
import { jsx as _jsx4, } from 'react/jsx-runtime';
import * as React3 from 'react';
var containerStyles2 = {
  width: '100%',
  height: '100%',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
};
var emptyStateStyle2 = {
  ...containerStyles2,
  borderRadius: 6,
  background: 'rgba(149, 149, 149, 0.1)',
  border: '1px dashed rgba(149, 149, 149, 0.15)',
  color: '#a5a5a5',
  flexDirection: 'column',
};
var NullState = /* @__PURE__ */ React3.forwardRef((_, ref,) => {
  return /* @__PURE__ */ _jsx4('div', {
    style: emptyStateStyle2,
    ref,
  },);
},);

// https :https://framer.com/m/phosphor-icons/House.js@0.0.57
var Component;
var IconInner;
var Icon = (React6,) => {
  if (!Component) {
    Component = /* @__PURE__ */ new Map([
      [
        'bold',
        /* @__PURE__ */ React6.createElement(
          React6.Fragment,
          null,
          /* @__PURE__ */ React6.createElement('path', {
            d: 'M222.14,105.85l-80-80a20,20,0,0,0-28.28,0l-80,80A19.86,19.86,0,0,0,28,120v96a12,12,0,0,0,12,12h64a12,12,0,0,0,12-12V164h24v52a12,12,0,0,0,12,12h64a12,12,0,0,0,12-12V120A19.86,19.86,0,0,0,222.14,105.85ZM204,204H164V152a12,12,0,0,0-12-12H104a12,12,0,0,0-12,12v52H52V121.65l76-76,76,76Z',
          },),
        ),
      ],
      [
        'duotone',
        /* @__PURE__ */ React6.createElement(
          React6.Fragment,
          null,
          /* @__PURE__ */ React6.createElement(
            'path',
            {
              d: 'M216,120v96H152V152H104v64H40V120a8,8,0,0,1,2.34-5.66l80-80a8,8,0,0,1,11.32,0l80,80A8,8,0,0,1,216,120Z',
              opacity: '0.2',
            },
          ),
          /* @__PURE__ */ React6.createElement('path', {
            d: 'M219.31,108.68l-80-80a16,16,0,0,0-22.62,0l-80,80A15.87,15.87,0,0,0,32,120v96a8,8,0,0,0,8,8h64a8,8,0,0,0,8-8V160h32v56a8,8,0,0,0,8,8h64a8,8,0,0,0,8-8V120A15.87,15.87,0,0,0,219.31,108.68ZM208,208H160V152a8,8,0,0,0-8-8H104a8,8,0,0,0-8,8v56H48V120l80-80,80,80Z',
          },),
        ),
      ],
      [
        'fill',
        /* @__PURE__ */ React6.createElement(
          React6.Fragment,
          null,
          /* @__PURE__ */ React6.createElement('path', {
            d: 'M224,120v96a8,8,0,0,1-8,8H160a8,8,0,0,1-8-8V164a4,4,0,0,0-4-4H108a4,4,0,0,0-4,4v52a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V120a16,16,0,0,1,4.69-11.31l80-80a16,16,0,0,1,22.62,0l80,80A16,16,0,0,1,224,120Z',
          },),
        ),
      ],
      [
        'light',
        /* @__PURE__ */ React6.createElement(
          React6.Fragment,
          null,
          /* @__PURE__ */ React6.createElement('path', {
            d: 'M217.9,110.1l-80-80a14,14,0,0,0-19.8,0l-80,80A13.92,13.92,0,0,0,34,120v96a6,6,0,0,0,6,6h64a6,6,0,0,0,6-6V158h36v58a6,6,0,0,0,6,6h64a6,6,0,0,0,6-6V120A13.92,13.92,0,0,0,217.9,110.1ZM210,210H158V152a6,6,0,0,0-6-6H104a6,6,0,0,0-6,6v58H46V120a2,2,0,0,1,.58-1.42l80-80a2,2,0,0,1,2.84,0l80,80A2,2,0,0,1,210,120Z',
          },),
        ),
      ],
      [
        'regular',
        /* @__PURE__ */ React6.createElement(
          React6.Fragment,
          null,
          /* @__PURE__ */ React6.createElement('path', {
            d: 'M219.31,108.68l-80-80a16,16,0,0,0-22.62,0l-80,80A15.87,15.87,0,0,0,32,120v96a8,8,0,0,0,8,8h64a8,8,0,0,0,8-8V160h32v56a8,8,0,0,0,8,8h64a8,8,0,0,0,8-8V120A15.87,15.87,0,0,0,219.31,108.68ZM208,208H160V152a8,8,0,0,0-8-8H104a8,8,0,0,0-8,8v56H48V120l80-80,80,80Z',
          },),
        ),
      ],
      [
        'thin',
        /* @__PURE__ */ React6.createElement(
          React6.Fragment,
          null,
          /* @__PURE__ */ React6.createElement('path', {
            d: 'M216.49,111.51l-80-80a12,12,0,0,0-17,0l-80,80A12,12,0,0,0,36,120v96a4,4,0,0,0,4,4h64a4,4,0,0,0,4-4V156h40v60a4,4,0,0,0,4,4h64a4,4,0,0,0,4-4V120A12,12,0,0,0,216.49,111.51ZM212,212H156V152a4,4,0,0,0-4-4H104a4,4,0,0,0-4,4v60H44V120a4,4,0,0,1,1.17-2.83l80-80a4,4,0,0,1,5.66,0l80,80A4,4,0,0,1,212,120Z',
          },),
        ),
      ],
    ],);
    IconInner = React6.forwardRef((props, ref,) =>
      /* @__PURE__ */ React6.createElement('g', { ref, ...props, }, Component.get(props.weight,),)
    );
  }
  return IconInner;
};
var House_default = Icon;

// https :https://framerusercontent.com/modules/Ma20hU0GGRxLxZphbywl/OSpwWF91FHPVFyQJjMHt/utils.js
import { useMemo as useMemo5, } from 'react';
import { ControlType as ControlType6, } from 'unframer';
var defaultEvents2 = {
  onClick: { type: ControlType6.EventHandler, },
  onMouseDown: { type: ControlType6.EventHandler, },
  onMouseUp: { type: ControlType6.EventHandler, },
  onMouseEnter: { type: ControlType6.EventHandler, },
  onMouseLeave: { type: ControlType6.EventHandler, },
};
var findByArray = (arr, search,) => arr.find((a,) => a.toLowerCase().includes(search,));
function useIconSelection(iconKeys2, selectByList, iconSearch = '', iconSelection, lowercaseIconKeyPairs2,) {
  const iconSearchResult = useMemo5(() => {
    if (iconSearch == null || (iconSearch === null || iconSearch === void 0 ? void 0 : iconSearch.length) === 0) return null;
    const iconSearchTerm = iconSearch.toLowerCase().replace(/-|\s/g, '',);
    var _iconSearchTerm;
    const searchResult = (_iconSearchTerm = lowercaseIconKeyPairs2[iconSearchTerm]) !== null && _iconSearchTerm !== void 0
      ? _iconSearchTerm
      : findByArray(iconKeys2, iconSearchTerm,);
    return searchResult;
  }, [iconSelection, iconSearch,],);
  const name = selectByList ? iconSelection : iconSearchResult;
  return name;
}

// https :https://framerusercontent.com/modules/tYScH7LTqUtz5KUaUAYP/p8dptk4UIND8hbFWz9V7/Phosphor.js
var iconKeys = [
  'Acorn',
  'AddressBook',
  'AddressBookTabs',
  'AirTrafficControl',
  'Airplane',
  'AirplaneInFlight',
  'AirplaneLanding',
  'AirplaneTakeoff',
  'AirplaneTaxiing',
  'AirplaneTilt',
  'Airplay',
  'Alarm',
  'Alien',
  'AlignBottom',
  'AlignBottomSimple',
  'AlignCenterVertical',
  'AlignLeft',
  'AlignLeftSimple',
  'AlignRight',
  'AlignRightSimple',
  'AlignTop',
  'AlignTopSimple',
  'AmazonLogo',
  'Ambulance',
  'Anchor',
  'AnchorSimple',
  'AndroidLogo',
  'Angle',
  'AngularLogo',
  'Aperture',
  'AppStoreLogo',
  'AppWindow',
  'AppleLogo',
  'ApplePodcastsLogo',
  'ApproximateEquals',
  'Archive',
  'ArchiveBox',
  'ArchiveTray',
  'Armchair',
  'ArrowArcLeft',
  'ArrowArcRight',
  'ArrowBendDownLeft',
  'ArrowBendDownRight',
  'ArrowBendLeftDown',
  'ArrowBendLeftUp',
  'ArrowBendRightDown',
  'ArrowBendRightUp',
  'ArrowBendUpLeft',
  'ArrowBendUpRight',
  'ArrowCircleDown',
  'ArrowCircleDownLeft',
  'ArrowCircleDownRight',
  'ArrowCircleLeft',
  'ArrowCircleRight',
  'ArrowCircleUp',
  'ArrowCircleUpLeft',
  'ArrowCircleUpRight',
  'ArrowClockwise',
  'ArrowDown',
  'ArrowDownLeft',
  'ArrowDownRight',
  'ArrowElbowDownLeft',
  'ArrowElbowDownRight',
  'ArrowElbowLeft',
  'ArrowElbowLeftDown',
  'ArrowElbowLeftUp',
  'ArrowElbowRight',
  'ArrowElbowRightDown',
  'ArrowElbowRightUp',
  'ArrowElbowUpLeft',
  'ArrowElbowUpRight',
  'ArrowFatDown',
  'ArrowFatLeft',
  'ArrowFatLineDown',
  'ArrowFatLineLeft',
  'ArrowFatLineRight',
  'ArrowFatLineUp',
  'ArrowFatLinesDown',
  'ArrowFatLinesLeft',
  'ArrowFatLinesRight',
  'ArrowFatLinesUp',
  'ArrowFatRight',
  'ArrowFatUp',
  'ArrowLeft',
  'ArrowLineDown',
  'ArrowLineDownLeft',
  'ArrowLineDownRight',
  'ArrowLineLeft',
  'ArrowLineRight',
  'ArrowLineUp',
  'ArrowLineUpLeft',
  'ArrowLineUpRight',
  'ArrowRight',
  'ArrowSquareDown',
  'ArrowSquareDownLeft',
  'ArrowSquareDownRight',
  'ArrowSquareIn',
  'ArrowSquareLeft',
  'ArrowSquareOut',
  'ArrowSquareRight',
  'ArrowSquareUp',
  'ArrowSquareUpLeft',
  'ArrowSquareUpRight',
  'ArrowUDownLeft',
  'ArrowUDownRight',
  'ArrowULeftDown',
  'ArrowULeftUp',
  'ArrowURightDown',
  'ArrowURightUp',
  'ArrowUUpLeft',
  'ArrowUUpRight',
  'ArrowUp',
  'ArrowUpLeft',
  'ArrowUpRight',
  'ArrowsClockwise',
  'ArrowsDownUp',
  'ArrowsHorizontal',
  'ArrowsIn',
  'ArrowsInCardinal',
  'ArrowsInLineVertical',
  'ArrowsInSimple',
  'ArrowsLeftRight',
  'ArrowsMerge',
  'ArrowsOut',
  'ArrowsOutCardinal',
  'ArrowsOutSimple',
  'ArrowsSplit',
  'ArrowsVertical',
  'Article',
  'ArticleMedium',
  'ArticleNyTimes',
  'Asclepius',
  'Asterisk',
  'AsteriskSimple',
  'At',
  'Atom',
  'Avocado',
  'Axe',
  'Baby',
  'BabyCarriage',
  'Backpack',
  'Backspace',
  'Bag',
  'BagSimple',
  'Balloon',
  'Bandaids',
  'Bank',
  'Barbell',
  'Barcode',
  'Barn',
  'Barricade',
  'Baseball',
  'BaseballCap',
  'BaseballHelmet',
  'Basket',
  'Basketball',
  'Bathtub',
  'BatteryCharging',
  'BatteryEmpty',
  'BatteryFull',
  'BatteryHigh',
  'BatteryLow',
  'BatteryMedium',
  'BatteryPlus',
  'BatteryPlusVertical',
  'BatteryVerticalEmpty',
  'BatteryVerticalFull',
  'BatteryVerticalHigh',
  'BatteryVerticalLow',
  'BatteryWarning',
  'BeachBall',
  'Beanie',
  'Bed',
  'BeerBottle',
  'BeerStein',
  'BehanceLogo',
  'Bell',
  'BellRinging',
  'BellSimple',
  'BellSimpleRinging',
  'BellSimpleSlash',
  'BellSimpleZ',
  'BellSlash',
  'BellZ',
  'Belt',
  'BezierCurve',
  'Bicycle',
  'Binary',
  'Binoculars',
  'Biohazard',
  'Bird',
  'Blueprint',
  'Bluetooth',
  'BluetoothConnected',
  'BluetoothSlash',
  'BluetoothX',
  'Boat',
  'Bomb',
  'Bone',
  'Book',
  'BookBookmark',
  'BookOpen',
  'BookOpenText',
  'BookOpenUser',
  'BookUser',
  'Bookmark',
  'BookmarkSimple',
  'Bookmarks',
  'BookmarksSimple',
  'Books',
  'Boot',
  'Boules',
  'BoundingBox',
  'BowlFood',
  'BowlSteam',
  'BowlingBall',
  'BoxArrowDown',
  'BoxArrowUp',
  'BoxingGlove',
  'BracketsAngle',
  'BracketsCurly',
  'BracketsRound',
  'BracketsSquare',
  'Brain',
  'Brandy',
  'Bread',
  'Bridge',
  'Briefcase',
  'BriefcaseMetal',
  'Broadcast',
  'Broom',
  'Browser',
  'Browsers',
  'Bug',
  'BugBeetle',
  'BugDroid',
  'Building',
  'BuildingApartment',
  'BuildingOffice',
  'Buildings',
  'Bulldozer',
  'Bus',
  'Butterfly',
  'CableCar',
  'Cactus',
  'Cake',
  'Calculator',
  'Calendar',
  'CalendarBlank',
  'CalendarCheck',
  'CalendarDot',
  'CalendarDots',
  'CalendarHeart',
  'CalendarMinus',
  'CalendarPlus',
  'CalendarSlash',
  'CalendarStar',
  'CalendarX',
  'CallBell',
  'Camera',
  'CameraPlus',
  'CameraRotate',
  'CameraSlash',
  'Campfire',
  'Car',
  'CarBattery',
  'CarProfile',
  'CarSimple',
  'Cardholder',
  'Cards',
  'CardsThree',
  'CaretCircleDoubleUp',
  'CaretCircleDown',
  'CaretCircleLeft',
  'CaretCircleRight',
  'CaretCircleUp',
  'CaretCircleUpDown',
  'CaretDoubleDown',
  'CaretDoubleLeft',
  'CaretDoubleRight',
  'CaretDoubleUp',
  'CaretDown',
  'CaretLeft',
  'CaretLineDown',
  'CaretLineLeft',
  'CaretLineRight',
  'CaretLineUp',
  'CaretRight',
  'CaretUp',
  'CaretUpDown',
  'Carrot',
  'CashRegister',
  'CassetteTape',
  'CastleTurret',
  'Cat',
  'CellSignalFull',
  'CellSignalHigh',
  'CellSignalLow',
  'CellSignalMedium',
  'CellSignalNone',
  'CellSignalSlash',
  'CellSignalX',
  'CellTower',
  'Certificate',
  'Chair',
  'Chalkboard',
  'ChalkboardSimple',
  'ChalkboardTeacher',
  'Champagne',
  'ChargingStation',
  'ChartBar',
  'ChartBarHorizontal',
  'ChartDonut',
  'ChartLine',
  'ChartLineDown',
  'ChartLineUp',
  'ChartPie',
  'ChartPieSlice',
  'ChartPolar',
  'ChartScatter',
  'Chat',
  'ChatCentered',
  'ChatCenteredDots',
  'ChatCenteredSlash',
  'ChatCenteredText',
  'ChatCircle',
  'ChatCircleDots',
  'ChatCircleSlash',
  'ChatCircleText',
  'ChatDots',
  'ChatSlash',
  'ChatTeardrop',
  'ChatTeardropDots',
  'ChatTeardropSlash',
  'ChatTeardropText',
  'ChatText',
  'Chats',
  'ChatsCircle',
  'ChatsTeardrop',
  'Check',
  'CheckCircle',
  'CheckFat',
  'CheckSquare',
  'CheckSquareOffset',
  'Checkerboard',
  'Checks',
  'Cheers',
  'Cheese',
  'ChefHat',
  'Cherries',
  'Church',
  'Cigarette',
  'CigaretteSlash',
  'Circle',
  'CircleDashed',
  'CircleHalf',
  'CircleHalfTilt',
  'CircleNotch',
  'CirclesFour',
  'CirclesThree',
  'CirclesThreePlus',
  'Circuitry',
  'City',
  'Clipboard',
  'ClipboardText',
  'Clock',
  'ClockAfternoon',
  'ClockClockwise',
  'ClockCountdown',
  'ClockUser',
  'ClosedCaptioning',
  'Cloud',
  'CloudArrowDown',
  'CloudArrowUp',
  'CloudCheck',
  'CloudFog',
  'CloudLightning',
  'CloudMoon',
  'CloudRain',
  'CloudSlash',
  'CloudSnow',
  'CloudSun',
  'CloudWarning',
  'CloudX',
  'Clover',
  'Club',
  'CoatHanger',
  'CodaLogo',
  'Code',
  'CodeBlock',
  'CodeSimple',
  'CodepenLogo',
  'CodesandboxLogo',
  'Coffee',
  'CoffeeBean',
  'Coin',
  'CoinVertical',
  'Coins',
  'Columns',
  'ColumnsPlusLeft',
  'ColumnsPlusRight',
  'Command',
  'Compass',
  'CompassRose',
  'CompassTool',
  'ComputerTower',
  'Confetti',
  'ContactlessPayment',
  'Control',
  'Cookie',
  'CookingPot',
  'Copy',
  'CopySimple',
  'Copyleft',
  'Copyright',
  'CornersIn',
  'CornersOut',
  'Couch',
  'CourtBasketball',
  'Cow',
  'CowboyHat',
  'Cpu',
  'Crane',
  'CraneTower',
  'CreditCard',
  'Cricket',
  'Crop',
  'Cross',
  'Crosshair',
  'CrosshairSimple',
  'Crown',
  'CrownCross',
  'CrownSimple',
  'Cube',
  'CubeFocus',
  'CubeTransparent',
  'CurrencyBtc',
  'CurrencyCircleDollar',
  'CurrencyCny',
  'CurrencyDollar',
  'CurrencyDollarSimple',
  'CurrencyEth',
  'CurrencyEur',
  'CurrencyGbp',
  'CurrencyInr',
  'CurrencyJpy',
  'CurrencyKrw',
  'CurrencyKzt',
  'CurrencyNgn',
  'CurrencyRub',
  'Cursor',
  'CursorClick',
  'CursorText',
  'Cylinder',
  'Database',
  'Desk',
  'Desktop',
  'DesktopTower',
  'Detective',
  'DevToLogo',
  'DeviceMobile',
  'DeviceMobileCamera',
  'DeviceMobileSlash',
  'DeviceMobileSpeaker',
  'DeviceRotate',
  'DeviceTablet',
  'DeviceTabletCamera',
  'DeviceTabletSpeaker',
  'Devices',
  'Diamond',
  'DiamondsFour',
  'DiceFive',
  'DiceFour',
  'DiceOne',
  'DiceSix',
  'DiceThree',
  'DiceTwo',
  'Disc',
  'DiscoBall',
  'DiscordLogo',
  'Divide',
  'Dna',
  'Dog',
  'Door',
  'DoorOpen',
  'Dot',
  'DotOutline',
  'DotsNine',
  'DotsSix',
  'DotsSixVertical',
  'DotsThree',
  'DotsThreeCircle',
  'DotsThreeOutline',
  'DotsThreeVertical',
  'Download',
  'DownloadSimple',
  'Dress',
  'Dresser',
  'DribbbleLogo',
  'Drone',
  'Drop',
  'DropHalf',
  'DropHalfBottom',
  'DropSimple',
  'DropSlash',
  'DropboxLogo',
  'Ear',
  'EarSlash',
  'Egg',
  'EggCrack',
  'Eject',
  'EjectSimple',
  'Elevator',
  'Empty',
  'Engine',
  'Envelope',
  'EnvelopeOpen',
  'EnvelopeSimple',
  'EnvelopeSimpleOpen',
  'Equalizer',
  'Equals',
  'Eraser',
  'EscalatorDown',
  'EscalatorUp',
  'Exam',
  'ExclamationMark',
  'Exclude',
  'ExcludeSquare',
  'Export',
  'Eye',
  'EyeClosed',
  'EyeSlash',
  'Eyedropper',
  'EyedropperSample',
  'Eyeglasses',
  'Eyes',
  'FaceMask',
  'FacebookLogo',
  'Factory',
  'Faders',
  'FadersHorizontal',
  'FalloutShelter',
  'Fan',
  'Farm',
  'FastForward',
  'FastForwardCircle',
  'Feather',
  'FediverseLogo',
  'FigmaLogo',
  'File',
  'FileArchive',
  'FileArrowDown',
  'FileArrowUp',
  'FileAudio',
  'FileC',
  'FileCloud',
  'FileCode',
  'FileCpp',
  'FileCss',
  'FileCsv',
  'FileDashed',
  'FileDoc',
  'FileHtml',
  'FileImage',
  'FileIni',
  'FileJpg',
  'FileJs',
  'FileJsx',
  'FileLock',
  'FileMagnifyingGlass',
  'FileMd',
  'FileMinus',
  'FilePdf',
  'FilePlus',
  'FilePng',
  'FilePpt',
  'FilePy',
  'FileRs',
  'FileSql',
  'FileSvg',
  'FileText',
  'FileTs',
  'FileTsx',
  'FileTxt',
  'FileVideo',
  'FileVue',
  'FileX',
  'FileXls',
  'FileZip',
  'Files',
  'FilmReel',
  'FilmScript',
  'FilmSlate',
  'FilmStrip',
  'Fingerprint',
  'FingerprintSimple',
  'FinnTheHuman',
  'Fire',
  'FireExtinguisher',
  'FireSimple',
  'FireTruck',
  'FirstAid',
  'FirstAidKit',
  'Fish',
  'FishSimple',
  'Flag',
  'FlagBanner',
  'FlagBannerFold',
  'FlagCheckered',
  'FlagPennant',
  'Flame',
  'Flashlight',
  'Flask',
  'FlipHorizontal',
  'FlipVertical',
  'FloppyDisk',
  'FloppyDiskBack',
  'FlowArrow',
  'Flower',
  'FlowerLotus',
  'FlowerTulip',
  'FlyingSaucer',
  'Folder',
  'FolderDashed',
  'FolderLock',
  'FolderMinus',
  'FolderNotch',
  'FolderNotchMinus',
  'FolderNotchOpen',
  'FolderNotchPlus',
  'FolderOpen',
  'FolderPlus',
  'FolderSimple',
  'FolderSimpleDashed',
  'FolderSimpleLock',
  'FolderSimpleMinus',
  'FolderSimplePlus',
  'FolderSimpleStar',
  'FolderSimpleUser',
  'FolderStar',
  'FolderUser',
  'Folders',
  'Football',
  'FootballHelmet',
  'Footprints',
  'ForkKnife',
  'FourK',
  'FrameCorners',
  'FramerLogo',
  'Function',
  'Funnel',
  'FunnelSimple',
  'FunnelSimpleX',
  'FunnelX',
  'GameController',
  'Garage',
  'GasCan',
  'GasPump',
  'Gauge',
  'Gavel',
  'Gear',
  'GearFine',
  'GearSix',
  'GenderFemale',
  'GenderIntersex',
  'GenderMale',
  'GenderNeuter',
  'GenderNonbinary',
  'GenderTransgender',
  'Ghost',
  'Gif',
  'Gift',
  'GitBranch',
  'GitCommit',
  'GitDiff',
  'GitFork',
  'GitMerge',
  'GitPullRequest',
  'GithubLogo',
  'GitlabLogo',
  'GitlabLogoSimple',
  'Globe',
  'GlobeHemisphereEast',
  'GlobeHemisphereWest',
  'GlobeSimple',
  'GlobeSimpleX',
  'GlobeStand',
  'GlobeX',
  'Goggles',
  'Golf',
  'GoodreadsLogo',
  'GoogleCardboardLogo',
  'GoogleChromeLogo',
  'GoogleDriveLogo',
  'GoogleLogo',
  'GooglePhotosLogo',
  'GooglePlayLogo',
  'GooglePodcastsLogo',
  'Gps',
  'GpsFix',
  'GpsSlash',
  'Gradient',
  'GraduationCap',
  'Grains',
  'GrainsSlash',
  'Graph',
  'GraphicsCard',
  'GreaterThan',
  'GreaterThanOrEqual',
  'GridFour',
  'GridNine',
  'Guitar',
  'HairDryer',
  'Hamburger',
  'Hammer',
  'Hand',
  'HandArrowDown',
  'HandArrowUp',
  'HandCoins',
  'HandDeposit',
  'HandEye',
  'HandFist',
  'HandGrabbing',
  'HandHeart',
  'HandPalm',
  'HandPeace',
  'HandPointing',
  'HandSoap',
  'HandSwipeLeft',
  'HandSwipeRight',
  'HandTap',
  'HandWaving',
  'HandWithdraw',
  'Handbag',
  'HandbagSimple',
  'HandsClapping',
  'HandsPraying',
  'Handshake',
  'HardDrive',
  'HardDrives',
  'HardHat',
  'Hash',
  'HashStraight',
  'HeadCircuit',
  'Headlights',
  'Headphones',
  'Headset',
  'Heart',
  'HeartBreak',
  'HeartHalf',
  'HeartStraight',
  'HeartStraightBreak',
  'Heartbeat',
  'Hexagon',
  'HighDefinition',
  'HighHeel',
  'Highlighter',
  'HighlighterCircle',
  'Hockey',
  'Hoodie',
  'Horse',
  'Hospital',
  'Hourglass',
  'HourglassHigh',
  'HourglassLow',
  'HourglassMedium',
  'HourglassSimple',
  'HourglassSimpleHigh',
  'HourglassSimpleLow',
  'House',
  'HouseLine',
  'HouseSimple',
  'Hurricane',
  'IceCream',
  'IdentificationBadge',
  'IdentificationCard',
  'Image',
  'ImageBroken',
  'ImageSquare',
  'Images',
  'ImagesSquare',
  'Infinity',
  'Info',
  'InstagramLogo',
  'Intersect',
  'IntersectSquare',
  'IntersectThree',
  'Intersection',
  'Invoice',
  'Island',
  'Jar',
  'JarLabel',
  'Jeep',
  'Joystick',
  'Kanban',
  'Key',
  'KeyReturn',
  'Keyboard',
  'Keyhole',
  'Knife',
  'Ladder',
  'LadderSimple',
  'Lamp',
  'LampPendant',
  'Laptop',
  'Lasso',
  'LastfmLogo',
  'Layout',
  'Leaf',
  'Lectern',
  'Lego',
  'LegoSmiley',
  'LessThan',
  'LessThanOrEqual',
  'LetterCircleH',
  'LetterCircleP',
  'LetterCircleV',
  'Lifebuoy',
  'Lightbulb',
  'LightbulbFilament',
  'Lighthouse',
  'Lightning',
  'LightningA',
  'LightningSlash',
  'LineSegment',
  'LineSegments',
  'LineVertical',
  'Link',
  'LinkBreak',
  'LinkSimple',
  'LinkSimpleBreak',
  'LinkSimpleHorizontal',
  'LinkedinLogo',
  'LinktreeLogo',
  'LinuxLogo',
  'List',
  'ListBullets',
  'ListChecks',
  'ListDashes',
  'ListHeart',
  'ListMagnifyingGlass',
  'ListNumbers',
  'ListPlus',
  'ListStar',
  'Lock',
  'LockKey',
  'LockKeyOpen',
  'LockLaminated',
  'LockLaminatedOpen',
  'LockOpen',
  'LockSimple',
  'LockSimpleOpen',
  'Lockers',
  'Log',
  'MagicWand',
  'Magnet',
  'MagnetStraight',
  'MagnifyingGlass',
  'MagnifyingGlassMinus',
  'MagnifyingGlassPlus',
  'Mailbox',
  'MapPin',
  'MapPinArea',
  'MapPinLine',
  'MapPinPlus',
  'MapPinSimple',
  'MapPinSimpleArea',
  'MapPinSimpleLine',
  'MapTrifold',
  'MarkdownLogo',
  'MarkerCircle',
  'Martini',
  'MaskHappy',
  'MaskSad',
  'MastodonLogo',
  'MathOperations',
  'MatrixLogo',
  'Medal',
  'MedalMilitary',
  'MediumLogo',
  'Megaphone',
  'MegaphoneSimple',
  'MemberOf',
  'Memory',
  'MessengerLogo',
  'MetaLogo',
  'Meteor',
  'Metronome',
  'Microphone',
  'MicrophoneSlash',
  'MicrophoneStage',
  'Microscope',
  'MicrosoftExcelLogo',
  'MicrosoftOutlookLogo',
  'MicrosoftTeamsLogo',
  'MicrosoftWordLogo',
  'Minus',
  'MinusCircle',
  'MinusSquare',
  'Money',
  'MoneyWavy',
  'Monitor',
  'MonitorArrowUp',
  'MonitorPlay',
  'Moon',
  'MoonStars',
  'Moped',
  'MopedFront',
  'Mosque',
  'Motorcycle',
  'Mountains',
  'Mouse',
  'MouseLeftClick',
  'MouseMiddleClick',
  'MouseRightClick',
  'MouseScroll',
  'MouseSimple',
  'MusicNote',
  'MusicNoteSimple',
  'MusicNotes',
  'MusicNotesMinus',
  'MusicNotesPlus',
  'MusicNotesSimple',
  'NavigationArrow',
  'Needle',
  'Network',
  'NetworkSlash',
  'NetworkX',
  'Newspaper',
  'NewspaperClipping',
  'NotEquals',
  'NotMemberOf',
  'NotSubsetOf',
  'NotSupersetOf',
  'Notches',
  'Note',
  'NoteBlank',
  'NotePencil',
  'Notebook',
  'Notepad',
  'Notification',
  'NotionLogo',
  'NuclearPlant',
  'NumberCircleEight',
  'NumberCircleFive',
  'NumberCircleFour',
  'NumberCircleNine',
  'NumberCircleOne',
  'NumberCircleSeven',
  'NumberCircleSix',
  'NumberCircleThree',
  'NumberCircleTwo',
  'NumberCircleZero',
  'NumberEight',
  'NumberFive',
  'NumberFour',
  'NumberNine',
  'NumberOne',
  'NumberSeven',
  'NumberSix',
  'NumberSquareEight',
  'NumberSquareFive',
  'NumberSquareFour',
  'NumberSquareNine',
  'NumberSquareOne',
  'NumberSquareSeven',
  'NumberSquareSix',
  'NumberSquareThree',
  'NumberSquareTwo',
  'NumberSquareZero',
  'NumberThree',
  'NumberTwo',
  'NumberZero',
  'Numpad',
  'Nut',
  'NyTimesLogo',
  'Octagon',
  'OfficeChair',
  'Onigiri',
  'OpenAiLogo',
  'Option',
  'Orange',
  'OrangeSlice',
  'Oven',
  'Package',
  'PaintBrush',
  'PaintBrushBroad',
  'PaintBrushHousehold',
  'PaintBucket',
  'PaintRoller',
  'Palette',
  'Panorama',
  'Pants',
  'PaperPlane',
  'PaperPlaneRight',
  'PaperPlaneTilt',
  'Paperclip',
  'PaperclipHorizontal',
  'Parachute',
  'Paragraph',
  'Parallelogram',
  'Park',
  'Password',
  'Path',
  'PatreonLogo',
  'Pause',
  'PauseCircle',
  'PawPrint',
  'PaypalLogo',
  'Peace',
  'Pen',
  'PenNib',
  'PenNibStraight',
  'Pencil',
  'PencilCircle',
  'PencilLine',
  'PencilRuler',
  'PencilSimple',
  'PencilSimpleLine',
  'PencilSimpleSlash',
  'PencilSlash',
  'Pentagon',
  'Pentagram',
  'Pepper',
  'Percent',
  'Person',
  'PersonArmsSpread',
  'PersonSimple',
  'PersonSimpleBike',
  'PersonSimpleCircle',
  'PersonSimpleHike',
  'PersonSimpleRun',
  'PersonSimpleSki',
  'PersonSimpleSwim',
  'PersonSimpleTaiChi',
  'PersonSimpleThrow',
  'PersonSimpleWalk',
  'Perspective',
  'Phone',
  'PhoneCall',
  'PhoneDisconnect',
  'PhoneIncoming',
  'PhoneList',
  'PhoneOutgoing',
  'PhonePause',
  'PhonePlus',
  'PhoneSlash',
  'PhoneTransfer',
  'PhoneX',
  'PhosphorLogo',
  'Pi',
  'PianoKeys',
  'PicnicTable',
  'PictureInPicture',
  'PiggyBank',
  'Pill',
  'PingPong',
  'PintGlass',
  'PinterestLogo',
  'Pinwheel',
  'Pipe',
  'PipeWrench',
  'PixLogo',
  'Pizza',
  'Placeholder',
  'Planet',
  'Plant',
  'Play',
  'PlayCircle',
  'PlayPause',
  'Playlist',
  'Plug',
  'PlugCharging',
  'Plugs',
  'PlugsConnected',
  'Plus',
  'PlusCircle',
  'PlusMinus',
  'PlusSquare',
  'PokerChip',
  'PoliceCar',
  'Polygon',
  'Popcorn',
  'Popsicle',
  'PottedPlant',
  'Power',
  'Prescription',
  'Presentation',
  'PresentationChart',
  'Printer',
  'Prohibit',
  'ProhibitInset',
  'ProjectorScreen',
  'ProjectorScreenChart',
  'Pulse',
  'PushPin',
  'PushPinSimple',
  'PushPinSimpleSlash',
  'PushPinSlash',
  'PuzzlePiece',
  'QrCode',
  'Question',
  'QuestionMark',
  'Queue',
  'Quotes',
  'Rabbit',
  'Racquet',
  'Radical',
  'Radio',
  'RadioButton',
  'Radioactive',
  'Rainbow',
  'RainbowCloud',
  'Ranking',
  'ReadCvLogo',
  'Receipt',
  'ReceiptX',
  'Record',
  'Rectangle',
  'RectangleDashed',
  'Recycle',
  'RedditLogo',
  'Repeat',
  'RepeatOnce',
  'ReplitLogo',
  'Resize',
  'Rewind',
  'RewindCircle',
  'RoadHorizon',
  'Robot',
  'Rocket',
  'RocketLaunch',
  'Rows',
  'RowsPlusBottom',
  'RowsPlusTop',
  'Rss',
  'RssSimple',
  'Rug',
  'Ruler',
  'Sailboat',
  'Scales',
  'Scan',
  'ScanSmiley',
  'Scissors',
  'Scooter',
  'Screencast',
  'Screwdriver',
  'Scribble',
  'ScribbleLoop',
  'Scroll',
  'Seal',
  'SealCheck',
  'SealPercent',
  'SealQuestion',
  'SealWarning',
  'Seat',
  'Seatbelt',
  'SecurityCamera',
  'Selection',
  'SelectionAll',
  'SelectionBackground',
  'SelectionForeground',
  'SelectionInverse',
  'SelectionPlus',
  'SelectionSlash',
  'Shapes',
  'Share',
  'ShareFat',
  'ShareNetwork',
  'Shield',
  'ShieldCheck',
  'ShieldCheckered',
  'ShieldChevron',
  'ShieldPlus',
  'ShieldSlash',
  'ShieldStar',
  'ShieldWarning',
  'ShippingContainer',
  'ShirtFolded',
  'ShootingStar',
  'ShoppingBag',
  'ShoppingBagOpen',
  'ShoppingCart',
  'ShoppingCartSimple',
  'Shovel',
  'Shower',
  'Shrimp',
  'Shuffle',
  'ShuffleAngular',
  'ShuffleSimple',
  'Sidebar',
  'SidebarSimple',
  'Sigma',
  'SignIn',
  'SignOut',
  'Signature',
  'Signpost',
  'SimCard',
  'Siren',
  'SketchLogo',
  'SkipBack',
  'SkipBackCircle',
  'SkipForward',
  'SkipForwardCircle',
  'Skull',
  'SkypeLogo',
  'SlackLogo',
  'Sliders',
  'SlidersHorizontal',
  'Slideshow',
  'Smiley',
  'SmileyAngry',
  'SmileyBlank',
  'SmileyMeh',
  'SmileyMelting',
  'SmileyNervous',
  'SmileySad',
  'SmileySticker',
  'SmileyWink',
  'SmileyXEyes',
  'SnapchatLogo',
  'Sneaker',
  'SneakerMove',
  'Snowflake',
  'SoccerBall',
  'Sock',
  'SolarPanel',
  'SolarRoof',
  'SortAscending',
  'SortDescending',
  'SoundcloudLogo',
  'Spade',
  'Sparkle',
  'SpeakerHifi',
  'SpeakerHigh',
  'SpeakerLow',
  'SpeakerNone',
  'SpeakerSimpleHigh',
  'SpeakerSimpleLow',
  'SpeakerSimpleNone',
  'SpeakerSimpleSlash',
  'SpeakerSimpleX',
  'SpeakerSlash',
  'SpeakerX',
  'Speedometer',
  'Sphere',
  'Spinner',
  'SpinnerBall',
  'SpinnerGap',
  'Spiral',
  'SplitHorizontal',
  'SplitVertical',
  'SpotifyLogo',
  'SprayBottle',
  'Square',
  'SquareHalf',
  'SquareHalfBottom',
  'SquareLogo',
  'SquareSplitVertical',
  'SquaresFour',
  'Stack',
  'StackMinus',
  'StackOverflowLogo',
  'StackPlus',
  'StackSimple',
  'Stairs',
  'Stamp',
  'StandardDefinition',
  'Star',
  'StarAndCrescent',
  'StarFour',
  'StarHalf',
  'StarOfDavid',
  'SteamLogo',
  'SteeringWheel',
  'Steps',
  'Stethoscope',
  'Sticker',
  'Stool',
  'Stop',
  'StopCircle',
  'Storefront',
  'Strategy',
  'StripeLogo',
  'Student',
  'SubsetOf',
  'SubsetProperOf',
  'Subtitles',
  'SubtitlesSlash',
  'Subtract',
  'SubtractSquare',
  'Subway',
  'Suitcase',
  'SuitcaseRolling',
  'SuitcaseSimple',
  'Sun',
  'SunDim',
  'SunHorizon',
  'Sunglasses',
  'SupersetOf',
  'SupersetProperOf',
  'Swap',
  'Swatches',
  'SwimmingPool',
  'Sword',
  'Synagogue',
  'Syringe',
  'TShirt',
  'Table',
  'Tabs',
  'Tag',
  'TagChevron',
  'TagSimple',
  'Target',
  'Taxi',
  'TeaBag',
  'TelegramLogo',
  'Television',
  'TelevisionSimple',
  'TennisBall',
  'Tent',
  'Terminal',
  'TerminalWindow',
  'TestTube',
  'TextAUnderline',
  'TextAa',
  'TextAlignCenter',
  'TextAlignJustify',
  'TextAlignLeft',
  'TextAlignRight',
  'TextB',
  'TextColumns',
  'TextH',
  'TextHFive',
  'TextHFour',
  'TextHOne',
  'TextHSix',
  'TextHThree',
  'TextHTwo',
  'TextIndent',
  'TextItalic',
  'TextOutdent',
  'TextStrikethrough',
  'TextSubscript',
  'TextSuperscript',
  'TextT',
  'TextTSlash',
  'TextUnderline',
  'Textbox',
  'Thermometer',
  'ThermometerCold',
  'ThermometerHot',
  'ThermometerSimple',
  'ThreadsLogo',
  'ThreeD',
  'ThumbsDown',
  'ThumbsUp',
  'Ticket',
  'TidalLogo',
  'TiktokLogo',
  'Tilde',
  'Timer',
  'TipJar',
  'Tipi',
  'Tire',
  'ToggleLeft',
  'ToggleRight',
  'Toilet',
  'ToiletPaper',
  'Toolbox',
  'Tooth',
  'Tornado',
  'Tote',
  'ToteSimple',
  'Towel',
  'Tractor',
  'Trademark',
  'TrademarkRegistered',
  'TrafficCone',
  'TrafficSign',
  'TrafficSignal',
  'Train',
  'TrainRegional',
  'TrainSimple',
  'Tram',
  'Translate',
  'Trash',
  'TrashSimple',
  'Tray',
  'TrayArrowDown',
  'TrayArrowUp',
  'TreasureChest',
  'Tree',
  'TreeEvergreen',
  'TreePalm',
  'TreeStructure',
  'TreeView',
  'TrendDown',
  'TrendUp',
  'Triangle',
  'TriangleDashed',
  'Trolley',
  'TrolleySuitcase',
  'Trophy',
  'Truck',
  'TruckTrailer',
  'TumblrLogo',
  'TwitchLogo',
  'TwitterLogo',
  'Umbrella',
  'UmbrellaSimple',
  'Union',
  'Unite',
  'UniteSquare',
  'Upload',
  'UploadSimple',
  'Usb',
  'User',
  'UserCheck',
  'UserCircle',
  'UserCircleCheck',
  'UserCircleDashed',
  'UserCircleGear',
  'UserCircleMinus',
  'UserCirclePlus',
  'UserFocus',
  'UserGear',
  'UserList',
  'UserMinus',
  'UserPlus',
  'UserRectangle',
  'UserSound',
  'UserSquare',
  'UserSwitch',
  'Users',
  'UsersFour',
  'UsersThree',
  'Van',
  'Vault',
  'VectorThree',
  'VectorTwo',
  'Vibrate',
  'Video',
  'VideoCamera',
  'VideoCameraSlash',
  'VideoConference',
  'Vignette',
  'VinylRecord',
  'VirtualReality',
  'Virus',
  'Visor',
  'Voicemail',
  'Volleyball',
  'Wall',
  'Wallet',
  'Warehouse',
  'Warning',
  'WarningCircle',
  'WarningDiamond',
  'WarningOctagon',
  'WashingMachine',
  'Watch',
  'WaveSawtooth',
  'WaveSine',
  'WaveSquare',
  'WaveTriangle',
  'Waveform',
  'WaveformSlash',
  'Waves',
  'Webcam',
  'WebcamSlash',
  'WebhooksLogo',
  'WechatLogo',
  'WhatsappLogo',
  'Wheelchair',
  'WheelchairMotion',
  'WifiHigh',
  'WifiLow',
  'WifiMedium',
  'WifiNone',
  'WifiSlash',
  'WifiX',
  'Wind',
  'Windmill',
  'WindowsLogo',
  'Wine',
  'Wrench',
  'X',
  'XCircle',
  'XLogo',
  'XSquare',
  'Yarn',
  'YinYang',
  'YoutubeLogo',
];
var moduleBaseUrl = 'https://framer.com/m/phosphor-icons/';
var weightOptions = ['thin', 'light', 'regular', 'bold', 'fill', 'duotone',];
var lowercaseIconKeyPairs = iconKeys.reduce((res, key,) => {
  res[key.toLowerCase()] = key;
  return res;
}, {},);
function Icon2(props,) {
  const { color, selectByList, iconSearch, iconSelection, onClick, onMouseDown, onMouseUp, onMouseEnter, onMouseLeave, weight, mirrored, } =
    props;
  const isMounted = useRef5(false,);
  const iconKey = useIconSelection(iconKeys, selectByList, iconSearch, iconSelection, lowercaseIconKeyPairs,);
  const [SelectedIcon, setSelectedIcon,] = useState5(iconKey === 'Home' ? House_default(React4,) : null,);
  async function importModule() {
    try {
      const version = '0.0.57';
      const iconModuleUrl = `${moduleBaseUrl}${iconKey}.js@${version}`;
      const module = await import(
        /* webpackIgnore: true */
        /* @vite-ignore */
        iconModuleUrl
      );
      if (isMounted.current) setSelectedIcon(module.default(React4,),);
    } catch (err) {
      if (isMounted.current) setSelectedIcon(null,);
    }
  }
  useEffect8(() => {
    isMounted.current = true;
    importModule();
    return () => {
      isMounted.current = false;
    };
  }, [iconKey,],);
  const isOnCanvas = RenderTarget5.current() === RenderTarget5.canvas;
  const emptyState = isOnCanvas ? /* @__PURE__ */ _jsx5(NullState, {},) : null;
  return /* @__PURE__ */ _jsx5(motion3.div, {
    style: { display: 'contents', },
    onClick,
    onMouseEnter,
    onMouseLeave,
    onMouseDown,
    onMouseUp,
    children: SelectedIcon
      ? /* @__PURE__ */ _jsx5('svg', {
        xmlns: 'http://www.w3.org/2000/svg',
        viewBox: '0 0 256 256',
        style: {
          userSelect: 'none',
          width: '100%',
          height: '100%',
          display: 'inline-block',
          fill: color,
          color,
          flexShrink: 0,
          transform: mirrored ? 'scale(-1, 1)' : void 0,
        },
        focusable: 'false',
        color,
        children: /* @__PURE__ */ _jsx5(SelectedIcon, { color, weight, },),
      },)
      : emptyState,
  },);
}
Icon2.displayName = 'Phosphor';
Icon2.defaultProps = {
  width: 24,
  height: 24,
  iconSelection: 'House',
  iconSearch: 'House',
  color: '#66F',
  selectByList: true,
  weight: 'regular',
  mirrored: false,
};
addPropertyControls3(Icon2, {
  selectByList: {
    type: ControlType7.Boolean,
    title: 'Select',
    enabledTitle: 'List',
    disabledTitle: 'Search',
    defaultValue: Icon2.defaultProps.selectByList,
  },
  iconSelection: {
    type: ControlType7.Enum,
    options: iconKeys,
    defaultValue: Icon2.defaultProps.iconSelection,
    title: 'Name',
    hidden: ({ selectByList, },) => !selectByList,
    description: 'Find every icon name on the [Phosphor site](https://phosphoricons.com/)',
  },
  iconSearch: {
    type: ControlType7.String,
    title: 'Name',
    placeholder: 'Menu, Wifi, Box\u2026',
    hidden: ({ selectByList, },) => selectByList,
  },
  color: { type: ControlType7.Color, title: 'Color', defaultValue: Icon2.defaultProps.color, },
  weight: {
    type: ControlType7.Enum,
    title: 'Weight',
    optionTitles: weightOptions.map((piece,) => piece.charAt(0,).toUpperCase() + piece.slice(1,)),
    options: weightOptions,
    defaultValue: Icon2.defaultProps.weight,
  },
  mirrored: { type: ControlType7.Boolean, enabledTitle: 'Yes', disabledTitle: 'No', defaultValue: Icon2.defaultProps.mirrored, },
  ...defaultEvents2,
},);

// https :https://framerusercontent.com/modules/eU3zxBKFoHQhYFiXuCB7/e05UICsEGRW8sSt9hrO3/roUNcvo3k.js
var AudioFonts = getFonts(Audio,);
var PhosphorFonts = getFonts(Icon2,);
var AudioControls = getPropertyControls(Audio,);
var enabledGestures = { d9G4aNstW: { hover: true, }, QBhEeDVyl: { hover: true, }, };
var cycleOrder = ['QBhEeDVyl', 'd9G4aNstW',];
var serializationHash = 'framer-y9JSg';
var variantClassNames = { d9G4aNstW: 'framer-v-ji6f8b', QBhEeDVyl: 'framer-v-14v2ic0', };
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants === null || variants === void 0
    ? void 0
    : variants.forEach((variant,) => variant && Object.assign(nextOverrides, overrides[variant],));
  return nextOverrides;
}
var transition1 = { damping: 60, delay: 0, mass: 1, stiffness: 500, type: 'spring', };
var Transition = ({ value, children, },) => {
  const config = React5.useContext(MotionConfigContext,);
  const transition = value !== null && value !== void 0 ? value : config.transition;
  const contextValue = React5.useMemo(() => ({ ...config, transition, }), [JSON.stringify(transition,),],);
  return /* @__PURE__ */ _jsx6(MotionConfigContext.Provider, { value: contextValue, children, },);
};
var Variants = motion4(React5.Fragment,);
var humanReadableVariantMap = { 'Sound Off': 'QBhEeDVyl', 'Sound On': 'd9G4aNstW', };
var getProps = ({ audio, height, id, width, ...props },) => {
  var _humanReadableVariantMap_props_variant, _ref;
  return {
    ...props,
    G8j5PgEWk: audio !== null && audio !== void 0 ? audio : props.G8j5PgEWk,
    variant:
      (_ref =
            (_humanReadableVariantMap_props_variant = humanReadableVariantMap[props.variant]) !== null &&
              _humanReadableVariantMap_props_variant !== void 0
              ? _humanReadableVariantMap_props_variant
              : props.variant) !== null && _ref !== void 0
        ? _ref
        : 'QBhEeDVyl',
  };
};
var createLayoutDependency = (props, variants,) => {
  if (props.layoutDependency) return variants.join('-',) + props.layoutDependency;
  return variants.join('-',);
};
var Component2 = /* @__PURE__ */ React5.forwardRef(function (props, ref,) {
  const { activeLocale, setLocale, } = useLocaleInfo();
  const { style, className, layoutId, variant, G8j5PgEWk, ...restProps } = getProps(props,);
  const {
    baseVariant,
    classNames,
    clearLoadingGesture,
    gestureHandlers,
    gestureVariant,
    isLoading,
    setGestureState,
    setVariant,
    variants,
  } = useVariantState({ cycleOrder, defaultVariant: 'QBhEeDVyl', enabledGestures, variant, variantClassNames, },);
  const layoutDependency = createLayoutDependency(props, variants,);
  const { activeVariantCallback, delay, } = useActiveVariantCallback(baseVariant,);
  const onTap1gnr2j = activeVariantCallback(async (...args) => {
    setGestureState({ isPressed: false, },);
    setVariant('d9G4aNstW',);
  },);
  const onTap6oljko = activeVariantCallback(async (...args) => {
    setGestureState({ isPressed: false, },);
    setVariant('QBhEeDVyl',);
  },);
  const onAppearhdfaef = activeVariantCallback(async (...args) => {
    await delay(() => setVariant('QBhEeDVyl',), 2e4,);
  },);
  useOnVariantChange(baseVariant, { d9G4aNstW: onAppearhdfaef, },);
  const ref1 = React5.useRef(null,);
  const defaultLayoutId = React5.useId();
  const sharedStyleClassNames = [];
  const componentViewport = useComponentViewport();
  return /* @__PURE__ */ _jsx6(LayoutGroup, {
    id: layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId,
    children: /* @__PURE__ */ _jsx6(Variants, {
      animate: variants,
      initial: false,
      children: /* @__PURE__ */ _jsx6(Transition, {
        value: transition1,
        children: /* @__PURE__ */ _jsxs4(motion4.div, {
          ...restProps,
          ...gestureHandlers,
          className: cx(serializationHash, ...sharedStyleClassNames, 'framer-14v2ic0', className, classNames,),
          'data-border': true,
          'data-framer-name': 'Sound Off',
          'data-highlight': true,
          layoutDependency,
          layoutId: 'QBhEeDVyl',
          onTap: onTap1gnr2j,
          ref: ref !== null && ref !== void 0 ? ref : ref1,
          style: {
            '--border-bottom-width': '1px',
            '--border-color': 'var(--token-1691cb44-c002-4542-9545-8a0801f91af2, rgb(231, 231, 231))',
            '--border-left-width': '1px',
            '--border-right-width': '1px',
            '--border-style': 'solid',
            '--border-top-width': '1px',
            backgroundColor: 'var(--token-f5909a4b-54e7-4c08-b63f-44713b4eba16, rgb(237, 36, 9))',
            borderBottomLeftRadius: 99,
            borderBottomRightRadius: 99,
            borderTopLeftRadius: 99,
            borderTopRightRadius: 99,
            boxShadow: '0px 1px 2px 0px rgba(0, 0, 0, 0.07)',
            ...style,
          },
          variants: {
            'd9G4aNstW-hover': {
              '--border-color': 'var(--token-88270a27-b998-4d64-94e7-850fa71e2842, rgb(39, 43, 45))',
              backgroundColor: 'var(--token-36bb1a2d-632b-41b6-8e08-ee48dcf29873, rgb(16, 16, 16))',
            },
            'QBhEeDVyl-hover': {
              '--border-color': 'var(--token-88270a27-b998-4d64-94e7-850fa71e2842, rgb(39, 43, 45))',
              backgroundColor: 'var(--token-36bb1a2d-632b-41b6-8e08-ee48dcf29873, rgb(16, 16, 16))',
            },
          },
          ...addPropertyOverrides(
            {
              'd9G4aNstW-hover': { 'data-framer-name': void 0, },
              'QBhEeDVyl-hover': { 'data-framer-name': void 0, },
              d9G4aNstW: { 'data-framer-name': 'Sound On', onTap: onTap6oljko, },
            },
            baseVariant,
            gestureVariant,
          ),
          children: [
            /* @__PURE__ */ _jsx6(ComponentViewportProvider, {
              children: /* @__PURE__ */ _jsx6(motion4.div, {
                className: 'framer-g8d8mu-container',
                layoutDependency,
                layoutId: 'nTXnZGq_k-container',
                style: { opacity: 0, },
                children: /* @__PURE__ */ _jsx6(Audio, {
                  background: 'rgb(235, 235, 235)',
                  borderRadius: 8,
                  bottomLeftRadius: 8,
                  bottomRightRadius: 8,
                  gap: 15,
                  height: '100%',
                  id: 'nTXnZGq_k',
                  isMixedBorderRadius: false,
                  layoutId: 'nTXnZGq_k',
                  loop: false,
                  onPlayGlobalPauseOption: 'continue',
                  padding: 15,
                  paddingBottom: 15,
                  paddingLeft: 15,
                  paddingPerSide: false,
                  paddingRight: 15,
                  paddingTop: 15,
                  pauseOnExit: true,
                  playing: false,
                  playPauseCursor: 'default',
                  progress: 0,
                  progressColor: 'rgb(51, 51, 51)',
                  showPlayPause: true,
                  showTime: true,
                  showTrack: true,
                  srcFile: G8j5PgEWk,
                  srcType: 'Upload',
                  srcUrl: '',
                  style: { height: '100%', width: '100%', },
                  topLeftRadius: 8,
                  topRightRadius: 8,
                  trackColor: 'rgb(255, 255, 255)',
                  volume: 10,
                  width: '100%',
                  ...addPropertyOverrides({ d9G4aNstW: { playing: true, volume: 100, }, }, baseVariant, gestureVariant,),
                },),
              },),
            },),
            /* @__PURE__ */ _jsx6(ComponentViewportProvider, {
              children: /* @__PURE__ */ _jsx6(motion4.div, {
                className: 'framer-sgigfv-container',
                layoutDependency,
                layoutId: 'losJpJzrA-container',
                children: /* @__PURE__ */ _jsx6(Icon2, {
                  color: 'var(--token-20608b9f-0145-4a1e-b971-ee948ebbb015, rgb(255, 255, 255))',
                  height: '100%',
                  iconSearch: 'music',
                  iconSelection: 'Play',
                  id: 'losJpJzrA',
                  layoutId: 'losJpJzrA',
                  mirrored: false,
                  selectByList: true,
                  style: { height: '100%', width: '100%', },
                  weight: 'duotone',
                  width: '100%',
                  ...addPropertyOverrides(
                    {
                      'd9G4aNstW-hover': {
                        color: 'var(--token-f1edbbf0-4dde-4043-88fc-e447b2e4f208, rgb(255, 255, 255))',
                        weight: 'fill',
                      },
                      'QBhEeDVyl-hover': {
                        color: 'var(--token-f1edbbf0-4dde-4043-88fc-e447b2e4f208, rgb(255, 255, 255))',
                        weight: 'fill',
                      },
                      d9G4aNstW: { iconSelection: 'Pause', },
                    },
                    baseVariant,
                    gestureVariant,
                  ),
                },),
              },),
            },),
          ],
        },),
      },),
    },),
  },);
},);
var css = [
  '@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }',
  '.framer-y9JSg.framer-o66ci2, .framer-y9JSg .framer-o66ci2 { display: block; }',
  '.framer-y9JSg.framer-14v2ic0 { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 12px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }',
  '.framer-y9JSg .framer-g8d8mu-container { flex: none; height: 50px; left: calc(50.00000000000002% - 240px / 2); pointer-events: none; position: absolute; top: calc(50.00000000000002% - 50px / 2); width: 240px; z-index: 0; }',
  '.framer-y9JSg .framer-sgigfv-container { flex: none; height: 32px; position: relative; width: 32px; }',
  '@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-y9JSg.framer-14v2ic0 { gap: 0px; } .framer-y9JSg.framer-14v2ic0 > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-y9JSg.framer-14v2ic0 > :first-child { margin-left: 0px; } .framer-y9JSg.framer-14v2ic0 > :last-child { margin-right: 0px; } }',
  '.framer-y9JSg[data-border="true"]::after, .framer-y9JSg [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerroUNcvo3k = withCSS2(Component2, css, 'framer-y9JSg',);
var stdin_default = FramerroUNcvo3k;
FramerroUNcvo3k.displayName = 'Buttons/Sound on tap';
FramerroUNcvo3k.defaultProps = { height: 56, width: 56, };
addPropertyControls4(FramerroUNcvo3k, {
  variant: { options: ['QBhEeDVyl', 'd9G4aNstW',], optionTitles: ['Sound Off', 'Sound On',], title: 'Variant', type: ControlType8.Enum, },
  G8j5PgEWk: (AudioControls === null || AudioControls === void 0 ? void 0 : AudioControls['srcFile']) &&
    { ...AudioControls['srcFile'], __defaultAssetReference: '', description: void 0, hidden: void 0, title: 'Audio', },
},);
addFonts(FramerroUNcvo3k, [{ explicitInter: true, fonts: [], }, ...AudioFonts, ...PhosphorFonts,], {
  supportsExplicitInterCodegen: true,
},);

// virtual:buttons-sound-on-tap
import { WithFramerBreakpoints, } from 'unframer';
import { jsx, } from 'react/jsx-runtime';
stdin_default.Responsive = (props,) => {
  return /* @__PURE__ */ jsx(WithFramerBreakpoints, { Component: stdin_default, ...props, },);
};
var buttons_sound_on_tap_default = stdin_default;
export { buttons_sound_on_tap_default as default, };
